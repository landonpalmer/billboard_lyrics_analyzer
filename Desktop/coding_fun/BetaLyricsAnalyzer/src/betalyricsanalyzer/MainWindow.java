/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package betalyricsanalyzer;

import static com.sun.xml.internal.fastinfoset.alphabet.BuiltInRestrictedAlphabets.table;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Random;
import java.util.Scanner;
import java.util.Set;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.control.Cell;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import java.awt.Color;
import java.awt.Font;
import java.util.HashSet;
import javax.swing.*;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;
import javax.swing.text.Highlighter.HighlightPainter;

/**
 *
 * @author landonpalmer
 */
public class MainWindow extends javax.swing.JFrame {

    // ====================== Declaration of instance variables ======================= //

    // Maybe: arrayLists full of billboard song objects
    // key is year, value is arraylist?
    
    private HashMap<String, Song> songObjects;
    
    private ArrayList<Song> bbSongs;
    
    // for setting class variable year
    private int classYear;
    
    private File currentFile;
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {

        
        initComponents();
        
        
//        try {
//            // TODO add your handling code here:
//            importSongObjects();
//        } catch (IOException ex) {
//        }
        
        // Lyrics window closed on start
        dialogue_lyricsWindow.setVisible(false);
        
        // Lyrics window custom option unavailable until selected
        textField_custom.setEnabled(false);
        
        // Fills select year for billboard
        fillComboBox();
        
        // Centers jFrame regardless of screen size
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        
        // Aligns table headers in center
        ((DefaultTableCellRenderer)table_songsList.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);
        table_songsList.getTableHeader().setFont(new Font("LucideGrande", Font.BOLD, 14));
        table_songsList.getTableHeader().setBackground(Color.white);
        
        // Main storage for song objects per year
        bbSongs = new ArrayList();
        
        // Unused - for later testing
        songObjects = new HashMap();
        
        // Updated for display and internal data use
        classYear = 0; 
        
        // TODO: replace with lyrics window
        textArea_lyrics.setText("Sorry, the lyrics for this song are unavailable.");
                
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dialogue_lyricsWindow = new javax.swing.JDialog();
        tabbedPane_lyrics = new javax.swing.JTabbedPane();
        panel_lyricsAnalyzer = new javax.swing.JPanel();
        scrollPane_lyrics = new javax.swing.JScrollPane();
        textArea_lyrics = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        label_songLabel = new javax.swing.JLabel();
        button_obscenity = new javax.swing.JRadioButton();
        button_drug = new javax.swing.JRadioButton();
        button_affection = new javax.swing.JRadioButton();
        button_custom = new javax.swing.JRadioButton();
        textField_custom = new javax.swing.JTextField();
        panel_statistics = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        table_stats = new javax.swing.JTable();
        buttonGroup = new javax.swing.ButtonGroup();
        comboBox_selectYear = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_songsList = new javax.swing.JTable();
        button_exportToExcel = new javax.swing.JButton();
        jLabel_year = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuItem_open = new javax.swing.JMenuItem();
        menuItem_save = new javax.swing.JMenuItem();
        menuItem_saveAs = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        dialogue_lyricsWindow.setLocation(new java.awt.Point(500, 200));
        dialogue_lyricsWindow.setMinimumSize(new java.awt.Dimension(500, 500));
        dialogue_lyricsWindow.setResizable(false);
        dialogue_lyricsWindow.setSize(new java.awt.Dimension(593, 384));

        panel_lyricsAnalyzer.setLayout(null);

        textArea_lyrics.setColumns(20);
        textArea_lyrics.setRows(5);
        textArea_lyrics.setText("Call it how it is\nHendrix\nI promise, I swear I swear\nSpit it\nYo\n\nPercocets\nMolly, Percocets\nPercocets\nMolly, Percocets\nRep the set\nGotta rep the set\nChase a check\nNever chase a bitch\nMask on\nFuck it, mask off\nMask on\nFuck it, mask off\nPercocets\nMolly, Percocets\nChase a check\nNever chase a bitch\n\nTwo cups\nToast up with the gang\nFrom food stamps\nTo a whole nother domain\nOut the bottom\nI'm a living proof\nThey compromising\nHalf a million on the coupe\nDrug houses\nLooking like Peru\nGraduated\nI was overdue\nPink molly\nI can barely move\nAsk about me\nI'm going bust a move\nRick James\n33 chains\nOld Chanel\nCrusing Biscayne\nTop off\nThat's a liability\nHit the gas\nBoosting my adrenaline");
        scrollPane_lyrics.setViewportView(textArea_lyrics);

        panel_lyricsAnalyzer.add(scrollPane_lyrics);
        scrollPane_lyrics.setBounds(20, 80, 346, 284);

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 17)); // NOI18N
        jLabel2.setText("Highlight:");
        panel_lyricsAnalyzer.add(jLabel2);
        jLabel2.setBounds(430, 80, 82, 21);

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 1, 17)); // NOI18N
        jLabel3.setText("Lyrics for:");
        panel_lyricsAnalyzer.add(jLabel3);
        jLabel3.setBounds(50, 40, 89, 21);

        label_songLabel.setFont(new java.awt.Font("Lucida Grande", 0, 17)); // NOI18N
        label_songLabel.setText("  \"Mask Off\" by Future");
        panel_lyricsAnalyzer.add(label_songLabel);
        label_songLabel.setBounds(150, 40, 450, 21);

        buttonGroup.add(button_obscenity);
        button_obscenity.setText("Obscenity");
        button_obscenity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_obscenityActionPerformed(evt);
            }
        });
        panel_lyricsAnalyzer.add(button_obscenity);
        button_obscenity.setBounds(410, 160, 97, 25);

        buttonGroup.add(button_drug);
        button_drug.setText("Drug References");
        button_drug.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_drugActionPerformed(evt);
            }
        });
        panel_lyricsAnalyzer.add(button_drug);
        button_drug.setBounds(410, 200, 137, 25);

        buttonGroup.add(button_affection);
        button_affection.setText("Affection");
        button_affection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_affectionActionPerformed(evt);
            }
        });
        panel_lyricsAnalyzer.add(button_affection);
        button_affection.setBounds(410, 120, 92, 25);

        buttonGroup.add(button_custom);
        button_custom.setText("Custom");
        button_custom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_customActionPerformed(evt);
            }
        });
        panel_lyricsAnalyzer.add(button_custom);
        button_custom.setBounds(410, 240, 83, 25);

        textField_custom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textField_customActionPerformed(evt);
            }
        });
        panel_lyricsAnalyzer.add(textField_custom);
        textField_custom.setBounds(420, 280, 137, 30);

        tabbedPane_lyrics.addTab("Highlight", panel_lyricsAnalyzer);

        table_stats.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Explicit", null},
                {"Obscenity Count", null},
                {"Drug References", null},
                {"Affection References", null}
            },
            new String [] {
                "Measure", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_stats.setRowHeight(40);
        jScrollPane2.setViewportView(table_stats);

        javax.swing.GroupLayout panel_statisticsLayout = new javax.swing.GroupLayout(panel_statistics);
        panel_statistics.setLayout(panel_statisticsLayout);
        panel_statisticsLayout.setHorizontalGroup(
            panel_statisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_statisticsLayout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(97, Short.MAX_VALUE))
        );
        panel_statisticsLayout.setVerticalGroup(
            panel_statisticsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_statisticsLayout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tabbedPane_lyrics.addTab("Stats", panel_statistics);

        javax.swing.GroupLayout dialogue_lyricsWindowLayout = new javax.swing.GroupLayout(dialogue_lyricsWindow.getContentPane());
        dialogue_lyricsWindow.getContentPane().setLayout(dialogue_lyricsWindowLayout);
        dialogue_lyricsWindowLayout.setHorizontalGroup(
            dialogue_lyricsWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dialogue_lyricsWindowLayout.createSequentialGroup()
                .addContainerGap(39, Short.MAX_VALUE)
                .addComponent(tabbedPane_lyrics, javax.swing.GroupLayout.PREFERRED_SIZE, 621, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );
        dialogue_lyricsWindowLayout.setVerticalGroup(
            dialogue_lyricsWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogue_lyricsWindowLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(tabbedPane_lyrics, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(900, 700));
        setResizable(false);
        getContentPane().setLayout(null);

        comboBox_selectYear.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        comboBox_selectYear.setMaximumRowCount(15);
        comboBox_selectYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "   Pick a Billboard Year..." }));
        comboBox_selectYear.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        comboBox_selectYear.setMinimumSize(new java.awt.Dimension(171, 36));
        comboBox_selectYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBox_selectYearActionPerformed(evt);
            }
        });
        getContentPane().add(comboBox_selectYear);
        comboBox_selectYear.setBounds(20, 80, 220, 40);

        table_songsList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Rank", "Song Title", "Song Artist"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_songsList.setMinimumSize(new java.awt.Dimension(150, 120));
        table_songsList.setRowHeight(30);
        jScrollPane1.setViewportView(table_songsList);
        if (table_songsList.getColumnModel().getColumnCount() > 0) {
            table_songsList.getColumnModel().getColumn(0).setMinWidth(75);
            table_songsList.getColumnModel().getColumn(0).setPreferredWidth(75);
            table_songsList.getColumnModel().getColumn(0).setMaxWidth(75);
        }

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(265, 79, 520, 554);

        button_exportToExcel.setText("Export Table to Excel");
        button_exportToExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_exportToExcelActionPerformed(evt);
            }
        });
        getContentPane().add(button_exportToExcel);
        button_exportToExcel.setBounds(600, 40, 183, 32);

        jLabel_year.setFont(new java.awt.Font("Lucida Grande", 1, 22)); // NOI18N
        jLabel_year.setForeground(new java.awt.Color(51, 51, 51));
        jLabel_year.setText("Billboard Year: ");
        getContentPane().add(jLabel_year);
        jLabel_year.setBounds(270, 40, 240, 22);

        jLabel1.setText("Click on a song for lyrics analysis!");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(30, 480, 200, 20);

        jMenu1.setText("File");

        menuItem_open.setText("Open");
        menuItem_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_openActionPerformed(evt);
            }
        });
        jMenu1.add(menuItem_open);

        menuItem_save.setText("Save");
        menuItem_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_saveActionPerformed(evt);
            }
        });
        jMenu1.add(menuItem_save);

        menuItem_saveAs.setText("Save As...");
        menuItem_saveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_saveAsActionPerformed(evt);
            }
        });
        jMenu1.add(menuItem_saveAs);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboBox_selectYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBox_selectYearActionPerformed
        
        // makes year item selected in combo box
        bbSongs.clear();
        String selectedYear = comboBox_selectYear.getSelectedItem().toString();
        int year = Integer.parseInt(selectedYear);
        
        // sets class variable as year, updates jLabel to such
        
        classYear = year;
        jLabel_year.setText("Billboard Year: " + classYear + "");
        
        // scrape and fill table
        
        // creates a new temporary list of songs from scraped year chosen
        // in the comboBox
        
        Scraper scraper = new Scraper();
        bbSongs = scraper.getSongsList(year);
        
        // creates an 2D array of String data of songs
        String[][] data = new String[bbSongs.size()][3];
        int index = 0;
        
        for(int i = 0; i < data.length; i++) {
           
            data[i][0] = bbSongs.get(i).getRank();
            data[i][1] = bbSongs.get(i).getTitle();
            data[i][2] = bbSongs.get(i).getArtist(); 
        }
        
        updateSongListTable(data);
        
        //Testing
        for(Song song: bbSongs)
            System.out.println(song.toString());
        
       //table_songsList.getColumnModel().getColumn(0).;
       //test
     
    }//GEN-LAST:event_comboBox_selectYearActionPerformed

    private void button_exportToExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_exportToExcelActionPerformed
        // TODO: only set visible when table is filled
        
        XSSFWorkbook wb = new XSSFWorkbook();
        XSSFSheet ws = wb.createSheet();
        
        for(int r = 0; r < table_songsList.getRowCount(); r++) {
            XSSFRow row;
            row = ws.createRow(r);
            for(int c = 0; c < table_songsList.getColumnCount(); c++) {
                
                XSSFCell cell = row.createCell(c);
                cell.setCellValue( (String) table_songsList.getValueAt(r, c));
                
            }
        }
        
        /* Third try- close but no cigar
        ///Users/landonpalmer/Desktop/
        
        File currentFile = new File("Billboard_Year_" + classYear + ".xlsx");
        
        try {
        FileOutputStream fos = new FileOutputStream(currentFile);
        wb.write(fos);
        
        
       
        
        
        JFileChooser jFileChooser = new JFileChooser();
        jFileChooser.setSelectedFile(currentFile);
        jFileChooser.showSaveDialog(null);
        
        fos.close();
        
        
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } */
        
        /* second try- not fullproof
        
         //Calls a file chooser
        // User chooses a file and the file is assigned <currentFile> instance variable
        // Then calls the saveActionPerformed method to actually save the file.
        
        JFileChooser jfc = new JFileChooser();
        
        if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            
            
            jfc.setSelectedFile(new File("fileToSave.txt"));
            jfc.showSaveDialog(null);
            
            
            
            try {
            
                FileOutputStream fos = new FileOutputStream(currentFile);
                wb.write(fos);
                fos.close();
            
                JOptionPane.showMessageDialog(this, "Table was successfully exported to an Excel file on Desktop", "Success!", JOptionPane.INFORMATION_MESSAGE);
            
            } catch (FileNotFoundException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
        }
      */
        
        // first try- fully fullproof
        
        // Write Excel to file system
        try {
            
            FileOutputStream fos = new FileOutputStream(new File("/Users/landonpalmer/Desktop/Billboard_Year_" + classYear + ".xlsx"));
            wb.write(fos);
            fos.close();
            
            JOptionPane.showMessageDialog(this, "Table was successfully exported to an Excel file on Desktop", "Success!", JOptionPane.INFORMATION_MESSAGE);
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
        
    }//GEN-LAST:event_button_exportToExcelActionPerformed

    private void textField_customActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textField_customActionPerformed
        // TODO add your handling code here:
        String lyrics = textArea_lyrics.getText();
        try {
            highlightCustom(lyrics);
        } catch (BadLocationException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_textField_customActionPerformed

    private void menuItem_openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_openActionPerformed
        // TODO add your handling code here:
        // reads the saved data (dataModel) from disk and replaces program
        // instance variables with the data from datamodel
        
        JFileChooser jfc = new JFileChooser();
        
        if(jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            currentFile = jfc.getSelectedFile();
        } else {
            return;
        }
        
        
        try {
            
            FileInputStream fis = new FileInputStream(currentFile);
            ObjectInputStream ois = new ObjectInputStream(fis);
            
            DataModel dm = (DataModel) ois.readObject();
            
            songObjects = dm.getSongObjects();
            
            
            fis.close();
            ois.close();
            
            
        } catch (FileNotFoundException ex) {
           // Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.toString(), "ERROR: File Not Found", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            //Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.toString(), "ERROR: Can't Write to Disk", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException ex) {
          //  Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.toString(), "ERROR: Wrong File Type", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_menuItem_openActionPerformed

    private void menuItem_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_saveActionPerformed
        
        // Writes all data in the program to a DataModel and saves the model to
        // this disk
        
        if (currentFile == null) {
            
            menuItem_saveAsActionPerformed(evt);
        }
        
        if (currentFile != null) {
        
       
            try {
                // jeep, makes pathway
                FileOutputStream fos = new FileOutputStream(currentFile);
                // trailer
                ObjectOutputStream oos = new ObjectOutputStream(fos);

                // packing stuff for trailer
                DataModel dm = new DataModel(songObjects);
                // put stuff in trailer
                oos.writeObject(dm);

                // close the path so you can do more stuff
                fos.close();
                oos.close();

            } catch (FileNotFoundException ex) {
                //Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, ex.toString(), "ERROR: File Not Found", JOptionPane.ERROR_MESSAGE);
            } catch (IOException ex) {
               // Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, ex.toString(), "ERROR: Can't Write to Disk", JOptionPane.ERROR_MESSAGE);
            }
        
        }
    }//GEN-LAST:event_menuItem_saveActionPerformed

    private void menuItem_saveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_saveAsActionPerformed
        // TODO add your handling code here:
        //Calls a file chooser
        // User chooses a file and the file is assigned <currentFile> instance variable
        // Then calls the saveActionPerformed method to actually save the file.
        
        JFileChooser jfc = new JFileChooser();
        
        if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
        
                currentFile = jfc.getSelectedFile();
                System.out.println(currentFile.toString());
                menuItem_saveActionPerformed(evt);
            
        }
    }//GEN-LAST:event_menuItem_saveAsActionPerformed

    private void button_obscenityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_obscenityActionPerformed

        String lyrics = textArea_lyrics.getText();
        System.out.println(lyrics);
        try {
            highlightBadWords(lyrics);
        } catch (BadLocationException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_button_obscenityActionPerformed

    private void button_drugActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_drugActionPerformed
        // TODO add your handling code here:
        String lyrics = textArea_lyrics.getText();
        try {
            highlightDrugs(lyrics);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadLocationException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_button_drugActionPerformed

    private void button_affectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_affectionActionPerformed
        // TODO add your handling code here:
        String lyrics = textArea_lyrics.getText();
        try {
            highlightAffections(lyrics);
        } catch (BadLocationException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_button_affectionActionPerformed

    private void button_customActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_customActionPerformed
        // TODO add your handling code here:
        textField_custom.setEnabled(true);
//        String lyrics = textArea_lyrics.getText();
//        try {
//            highlightCustom(lyrics);
//        } catch (BadLocationException ex) {
//            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_button_customActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JRadioButton button_affection;
    private javax.swing.JRadioButton button_custom;
    private javax.swing.JRadioButton button_drug;
    private javax.swing.JButton button_exportToExcel;
    private javax.swing.JRadioButton button_obscenity;
    private javax.swing.JComboBox<String> comboBox_selectYear;
    private javax.swing.JDialog dialogue_lyricsWindow;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel_year;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel label_songLabel;
    private javax.swing.JMenuItem menuItem_open;
    private javax.swing.JMenuItem menuItem_save;
    private javax.swing.JMenuItem menuItem_saveAs;
    private javax.swing.JPanel panel_lyricsAnalyzer;
    private javax.swing.JPanel panel_statistics;
    private javax.swing.JScrollPane scrollPane_lyrics;
    private javax.swing.JTabbedPane tabbedPane_lyrics;
    private javax.swing.JTable table_songsList;
    private javax.swing.JTable table_stats;
    private javax.swing.JTextArea textArea_lyrics;
    private javax.swing.JTextField textField_custom;
    // End of variables declaration//GEN-END:variables

// ========================================= METHODS ===================================== //
    public void importSongObjects() throws FileNotFoundException, IOException {
        // takes information from billboard grandmaster excel
        // and for each row creates a "song" object with year, title, artist, and lyrics
        // each of these song objects will be put into a hash map with key (title) and value (object)
        
        String EXCEL_fILE_PATH = "/Users/landonpalmer/Desktop/Billboard_Grandmaster1.xlsx";
        FileInputStream inputStream = new FileInputStream(new File(EXCEL_fILE_PATH));
        Workbook wb = WorkbookFactory.create(inputStream);
        Sheet ws = wb.getSheetAt(0);
        
        
        // print to test
        for(int r = 2; r < 6140; r++) {
            
            // avoid null pointers
            String year = null, rank = null, title = null, artist = null, lyrics = null;
            
            // assigns values to columns for song objects
            // consisting of (in order): year, rank, title, artist, lyrics
            XSSFRow row = (XSSFRow) ws.getRow(r);
            if(row.getCell(0) != null)
                year = row.getCell(0).toString();
            if(row.getCell(1) != null)
                rank = row.getCell(1).toString();
            if(row.getCell(2) != null)
                title = row.getCell(2).toString();
            if(row.getCell(3) != null)
                artist = row.getCell(3).toString();
            if(row.getCell(4) != null)
                lyrics = row.getCell(4).toString();
            
            // test print
//            System.out.println(
//                    "Year: " + year + "/"
//                    + "Rank: " + rank + "/" 
//                    + "Title: " + title + "/"
//                    + "Artist: " + artist + "/"
//                    + "Lyrics: " + lyrics);
                  
            // puts it in hashmap
            Song song = new Song(year, rank, title, artist, lyrics);
            System.out.println(song.toString());
            songObjects.put(title, new Song(year, rank, title, artist, lyrics));
            
            //System.out.println(songObjects.get(title).toString());
            } // end of for loop
            
        
        inputStream.close();
        wb.close();
        
    }
    
    public void fillComboBox() {
    
        // Adds years 1951-2018 for selection in comboBox
        for(int i = 1951; i <= 2018; i++) {
            comboBox_selectYear.addItem(i + "");
        }
    }
    
    // fills in songsList table with data from 2D array
    public void updateSongListTable(String data[][]) {
        
        
        DefaultTableModel dfm = new DefaultTableModel();
        
        // dimensions of table
        dfm.setRowCount(data.length);
        dfm.setColumnCount(3);
        
        // setting column headers of table
        String[] columnHeaders = {"Rank", "Song Title", "Song Artist"};
        dfm.setColumnIdentifiers(columnHeaders);
        
        
        // loops thru 2D array data and info in table model
        int index = 0;
        while(index <= data.length - 1) {
            
           // rank
           dfm.setValueAt(data[index][0], index, 0);
           // title
           dfm.setValueAt(data[index][1], index, 1);
           // artist
           dfm.setValueAt(data[index][2], index, 2);
            
           index++;
        
        }
        
        table_songsList.setModel(dfm);
        
        // Sets correct column size for rank
        TableColumnModel tcm = table_songsList.getColumnModel();       
        tcm.getColumn(0).setMaxWidth(75);
        tcm.getColumn(0).setPreferredWidth(75);
        
        // Sets center alignment for rank column
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        table_songsList.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
        
        
        // Action listener - if table row selected
        table_songsList.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
            public void valueChanged(ListSelectionEvent event) {
                // set song name and artist name in here

                // to avoid server overload and blacklisting
                // waits a mandatory 2000 milliseconds before request
                
                buttonGroup.clearSelection();
                int songIndex = table_songsList.getSelectedRow();
                System.out.println(songIndex);
                
                // conditional applied since when changing list is empty
                if(songIndex > -1) {
                    Song song = bbSongs.get(songIndex);
                    System.out.println(song.toString());

                    // conditional applied since the event runs multiple times when it changes
                    if ( !event.getValueIsAdjusting() && table_songsList.getSelectedRow() >-1 ) {

                        String title = song.getTitle();
                        String artist = song.getArtist();

                        // Updates label in lyrics window
                        label_songLabel.setText(title + " by " + artist);


                        // get lyrics from song title and artist, then display it in lyrics box
                        String lyrics = "";
                        try {
                            Scraper scraper = new Scraper();
                            scraper.waitTime(200);
                            lyrics = scraper.getLyrics(title, artist);
                        } catch (IOException ex) {
                            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        // dresses up lyrics window
                        updateTextAreaLyrics(lyrics);
                        try {
                            updateSongStats(lyrics);
                        } catch (FileNotFoundException ex) {
                            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        textArea_lyrics.setCaretPosition(0);
                        // time for the ball, Cinderella
                        dialogue_lyricsWindow.setVisible(true);
                    }
                }
            }
        }); 
        
    }
    
    public void updateTextAreaLyrics(String lyrics) {
        Scanner chopper = new Scanner(lyrics);
        int count = 0;
        String cleanLyrics = "";
        while(chopper.hasNext()) {
            String word = chopper.next();
            cleanLyrics += word + " ";
            if(count != 0 && count % 7 == 0) {
                cleanLyrics += "\n";
            }
            count++;
        }
        
        textArea_lyrics.setText(cleanLyrics);
    }
    
    public void exportToExcel(String data[][], int year) {
        
        XSSFWorkbook wb = new XSSFWorkbook();
        XSSFSheet ws = wb.createSheet();
        
        String EXCEL_FILE_PATH = "/Users/landonpalmer/Desktop/BillboardData_" + year + ".xlsx";
        for(int r = 0; r < data.length; r++) {
            XSSFRow row;
            row = ws.createRow(r);
            for(int c = 0; c < 5; c++) {
                
                XSSFCell cell = row.createCell(c);
                cell.setCellValue( (String) data[r][c]);
                
            }
        }
        
        try {
            
            FileOutputStream fos = new FileOutputStream(new File(EXCEL_FILE_PATH));
            wb.write(fos);
            fos.close();
            
            JOptionPane.showMessageDialog(this, "Table was successfully exported to an Excel file on Desktop", "Success!", JOptionPane.INFORMATION_MESSAGE);
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    public void exportLyricsToExcel() throws FileNotFoundException, IOException {
        
        // Take lyrics from lyrics wikia, with appropriate "waits"
        // and add them to the column "4" per each song
        
        String EXCEL_FILE_PATH = "/Users/landonpalmer/Desktop/BillboardData_2018.xlsx";
        
        FileInputStream inputStream = new FileInputStream(new File(EXCEL_FILE_PATH));
        Workbook wb = WorkbookFactory.create(inputStream);
        Sheet ws = wb.getSheetAt(0);
        
        Scraper scraper = new Scraper();
        
        //creates "r" rows with lyrics at r-cell 4
        for(int r = 1; r < 100; r+= 1) {
            
            // row/cell creation
            XSSFRow row = (XSSFRow) ws.getRow(r);
            XSSFCell lyricsCell = row.createCell(4);
            
            String year = row.getCell(0).getStringCellValue();
            String title = row.getCell(2).getStringCellValue();
            String artist = row.getCell(3).getStringCellValue();
            System.out.println("\n" + (r + 1) + ": " + title + " " + artist + " (" + year + ")");
            
            scraper.waitTime(1000);
            String lyrics = scraper.getLyrics(title, artist);
            System.out.println(lyrics + "\n");
            
            // With the lyrics, put it in the lyricsCell and save it
            lyricsCell.setCellValue(lyrics);
            
        }
        
        inputStream.close();
        FileOutputStream outputStream = new FileOutputStream(EXCEL_FILE_PATH);
        wb.write(outputStream);
        wb.close();
        outputStream.close();
        
    }
    
    public void analyzeLyrics() throws FileNotFoundException, IOException {
        
        String EXCEL_FILE_PATH = "/Users/landonpalmer/Desktop/Billboard_Grandmaster1.xlsx";
        
        FileInputStream inputStream = new FileInputStream(new File(EXCEL_FILE_PATH));
        Workbook wb = WorkbookFactory.create(inputStream);
        Sheet ws = wb.getSheetAt(0);
        
        LyricsAnalyzer analyzer = new LyricsAnalyzer();
        
        for(int i = 1953; i <= 2018; i++) {
            System.out.println(i + "   " + analyzer.gBannedCounter(i + "", ws, false));
        }
        
        //System.out.println(analyzer.gBannedCounterSingle("\"Humble\"", ws));
        
        
    
       
        //System.out.println("Carlin Count:: " + analyzer.carlinCounter(testYear, ws, true));
        //System.out.println("Carlin Count Every Word:: " + analyzer.carlinCountEveryWord(testYear, ws, false));
        //System.out.println("Google Banned:: " + analyzer.gBannedCounter(testYear, ws, true));
        //System.out.println("Google Count Every Word:: " + analyzer.gBannedCountEveryWord(testYear, ws, false));
        
        
        
        
        
        inputStream.close();
        wb.close();
        
        
    }
    
    public void exportCarlinCount() throws FileNotFoundException, IOException{
        
        String EXCEL_fILE_PATH = "/Users/landonpalmer/Desktop/Carlin_Every_Year.xlsx";
        
        FileInputStream inputStream = new FileInputStream(new File(EXCEL_fILE_PATH));
        Workbook wb = WorkbookFactory.create(inputStream);
        Sheet wss = wb.getSheetAt(0);
        
        LyricsAnalyzer analyzer = new LyricsAnalyzer();
        
        
        // headers
        XSSFRow headRow = (XSSFRow) wss.getRow(0);
        XSSFCell yearHead = headRow.createCell(1);
        XSSFCell carlinHead = headRow.createCell(2);
        yearHead.setCellValue("Year");
        carlinHead.setCellValue("Carlin Count");
        
        //creates "r" rows with lyrics at r-cell 4... 6142 is max
//        for(int r = 1; r < 65; r+= 1) {
//            
//            int year = r + 1953;
//            // row/cell creation
//            XSSFRow row = (XSSFRow) ws.getRow(r);
//            XSSFCell yearCell = row.createCell(0);
//            XSSFCell carlinCell = row.createCell(1);
//            
//            
//            
//            // Insert year and carlin value in cells
//            yearCell.setCellValue(year + "");
//            carlinCell.setCellValue(analyzer.carlinCounter(year + "", ws, false));
//            
//        }
        
        inputStream.close();
        FileOutputStream outputStream = new FileOutputStream("/Users/landonpalmer/Desktop/Carlin_Every_Year.xlsx");
        wb.write(outputStream);
        wb.close();
        outputStream.close();
        
        
        
        
    }
    
    public void exportSongObjects(int year) {
        
        // First we must pull data and put them in wiki files, which we can do
        // Loop to export song data from wikipedia onto excel files
        // Start with one year, we will make it into loop later
        Scraper scraper = new Scraper();
        
            
        System.out.println("Year:" + year);
        // Gets wiki year, making each song with an artist/title
        ArrayList <Song> songs = scraper.getSongsList(year);
        int length = songs.size();
        //testing
        for(Song song: songs)
            System.out.println(song.toString());

        // Makes new data 2D array, ripe for excel exportation
        String[][] songsData = new String[length + 1][5];
        
        // loops thru and assigns headers to data
        String[] headers = {"Year", "Rank", "Title", "Artist", "Lyrics"};
        for(int c = 0; c < headers.length; c++) {
            songsData[0][c] = headers[c];
        }
        for (int r = 0; r < length; r++) {

            Song song = songs.get(r);
            songsData[r + 1][0] = year + "";
            songsData[r + 1][1] = song.getRank();
            songsData[r + 1][2] = song.getTitle();
            songsData[r + 1][3] = song.getArtist();
            songsData[r + 1][4] = "";

        }

        // uses Apachi POI to export 2D array of song objects to excel
        exportToExcel(songsData, year);
    }
   
    public void printTest() throws IOException {
//        Set<String> keys = songObjects.keySet();
//        Iterator<String> iterator = keys.iterator();
//        while(iterator.hasNext()) {
//            
//            String title = iterator.next();
//            Song song = songObjects.get(title);
//            System.out.println(song.toString());
//            
//        }
        Scraper scraper = new Scraper();
        System.out.println(scraper.getLyrics("Outside Today", "YoungBoy Never Broke Again"));
    }
    
    public void highlightBadWords(String lyrics) throws BadLocationException, FileNotFoundException {
    
        String BANNED_WORDS_PATH = "list_badWords.txt";
        ArrayList<String> badWords = new ArrayList();
        Set swears = new HashSet();
        swears.clear();
        Highlighter highlighter = textArea_lyrics.getHighlighter();
        // important for switching between
        highlighter.removeAllHighlights();
       
        // Analysis:

        // adds bad words to arrayList for analysis
        Scanner chopBadWords = new Scanner(new File(BANNED_WORDS_PATH));
        while(chopBadWords.hasNext()) {
            String badWord = chopBadWords.next();
            badWords.add(badWord);
        }

        // adds target words to set
        Scanner chopper = new Scanner(lyrics);
        while(chopper.hasNext()) {
            String word = chopper.next();
            for(String swear : badWords ) {
                // IF SWEAR
                if(word.equals(swear)) {
                    //System.out.println(word + " and go stupid ahh");
                    swears.add(word);
                }
            }
            
        }
        
        
        Iterator<String> iterator = swears.iterator();
        while(iterator.hasNext()) {
            // loops through badWords and highlights based on indexOf
            String badWord = iterator.next();
            
            int i = lyrics.indexOf(badWord);
            while(i >= 0) {
                // do something with i
                int index = i;
                // Highlighting
                HighlightPainter painter = new DefaultHighlighter.DefaultHighlightPainter(Color.pink);
                int p0 = index;
                int p1 = p0 + badWord.length();
                highlighter.addHighlight(p0, p1, painter);
                
                
                i = lyrics.indexOf(badWord, i+1);
            }
            
        }
      
    }
    
    public void highlightDrugs(String lyrics) throws FileNotFoundException, BadLocationException {
        
        String BANNED_WORDS_PATH = "list_drugReferences.txt";
        ArrayList<String> drugWords = new ArrayList();
        Set drugs = new HashSet(); // haha get it
        drugs.clear();
        Highlighter highlighter = textArea_lyrics.getHighlighter();
        // important for switching between
        highlighter.removeAllHighlights();
        // Analysis:

        // adds bad words to arrayList for analysis
        Scanner chopBadWords = new Scanner(new File(BANNED_WORDS_PATH));
        while(chopBadWords.hasNext()) {
            String drugWord = chopBadWords.next();
            drugWords.add(drugWord);
        }

        // adds target words to set
        Scanner chopper = new Scanner(lyrics);
        while(chopper.hasNext()) {
            String word = chopper.next();
            for(String drug : drugWords ) {
                // IF DRUG
                if(word.equals(drug)) {
                    //System.out.println(word + " and go stupid ahh");
                    drugs.add(word);
                }
            }
            
        }
        
        
        Iterator<String> iterator = drugs.iterator();
        while(iterator.hasNext()) {
            // loops through badWords and highlights based on indexOf
            String drugWord = iterator.next();
            
            int i = lyrics.indexOf(drugWord);
            while(i >= 0) {
                // do something with i
                int index = i;
                
                HighlightPainter painter = new DefaultHighlighter.DefaultHighlightPainter(Color.pink);
                int p0 = index;
                int p1 = p0 + drugWord.length();
                highlighter.addHighlight(p0, p1, painter);
                
                
                i = lyrics.indexOf(drugWord, i+1);
            }
            
        }
    }
    
    public void highlightAffections(String lyrics) throws BadLocationException, FileNotFoundException {
        String BANNED_WORDS_PATH = "list_affection.txt";
        ArrayList<String> loveWords = new ArrayList();
        Set loves = new HashSet(); // haha get it
        loves.clear();
        Highlighter highlighter = textArea_lyrics.getHighlighter();
        // important for switching between
        highlighter.removeAllHighlights();
        // Analysis:

        // adds bad words to arrayList for analysis
        Scanner chopLoveWords = new Scanner(new File(BANNED_WORDS_PATH));
        while(chopLoveWords.hasNext()) {
            String loveWord = chopLoveWords.next();
            loveWords.add(loveWord);
        }

        // adds target words to set
        Scanner chopper = new Scanner(lyrics);
        while(chopper.hasNext()) {
            String word = chopper.next();
            for(String love : loveWords ) {
                // IF DRUG
                if(word.equals(love)) {
                    //System.out.println(word + " and go stupid ahh");
                    loves.add(word);
                }
            }
            
        }
        
        
        Iterator<String> iterator = loves.iterator();
        while(iterator.hasNext()) {
            // loops through badWords and highlights based on indexOf
            String loveWord = iterator.next();
            
            int i = lyrics.indexOf(loveWord);
            while(i >= 0) {
                // do something with i
                int index = i;
                
                HighlightPainter painter = new DefaultHighlighter.DefaultHighlightPainter(Color.pink);
                int p0 = index;
                int p1 = p0 + loveWord.length();
                highlighter.addHighlight(p0, p1, painter);
                
                
                i = lyrics.indexOf(loveWord, i+1);
            }
            
        }
    }
    
    public void highlightCustom(String lyrics) throws BadLocationException {
        
        
        Highlighter highlighter = textArea_lyrics.getHighlighter();
        // important for switching between
        highlighter.removeAllHighlights();
        // Analysis:

        String target = textField_custom.getText();
        if(target != null && !target.equals("")) {
            int i = lyrics.indexOf(target);
            while(i >= 0) {
                // do something with i
                int index = i;

                HighlightPainter painter = new DefaultHighlighter.DefaultHighlightPainter(Color.pink);
                int p0 = index;
                int p1 = p0 + target.length();
                highlighter.addHighlight(p0, p1, painter);


                i = lyrics.indexOf(target, i+1);
            }
        }
                
            
            
        
        
        
            
            
        
    }
    
    public void updateSongStats(String lyrics) throws FileNotFoundException {
        
        // Analysis on lyrics
        int badWordCount = 0;
        int drugWordCount = 0;
        int loveWordCount = 0;
        
        String BANNED_WORDS_PATH = "list_badWords.txt";
        Scanner chopBad = new Scanner(new File(BANNED_WORDS_PATH));
        ArrayList<String> badWords = new ArrayList();
        while(chopBad.hasNext()) {
            String badWord = chopBad.next();
            badWords.add(badWord);
        }
        
        String DRUG_WORDS_PATH = "list_drugReferences.txt";
        Scanner chopDrugs = new Scanner(new File(DRUG_WORDS_PATH));
        ArrayList<String> drugWords = new ArrayList();
        while(chopDrugs.hasNext()) {
            String drugWord = chopDrugs.next();
            drugWords.add(drugWord);
        }
        
        String LOVE_WORDS_PATH = "list_affection.txt";
        Scanner chopLove = new Scanner(new File(LOVE_WORDS_PATH));
        ArrayList<String> loveWords = new ArrayList();
        while(chopLove.hasNext()) {
            String loveWord = chopLove.next();
            loveWords.add(loveWord);
        }
        
        
        Scanner chopper = new Scanner(lyrics);
        while(chopper.hasNext()) {
            String word = chopper.next();
            for(String badWord : badWords) {
                if(word.equals(badWord)) {
                    badWordCount++;
                }
            }
            for(String drugWord : drugWords) {
                if(word.equals(drugWord)) {
                    drugWordCount++;
                }
            }
            for(String loveWord : loveWords) {
                if(word.equals(loveWord)) {
                    loveWordCount++;
                }
            }
        }
                
        
   
        
        // Update table
        
        // row 1 - is explicit
        if(badWordCount > 0) {
            table_stats.setValueAt("True", 0, 1);
        } else { table_stats.setValueAt("False", 0, 1); }
        
        // row 2 - obscenity count
        table_stats.setValueAt(badWordCount + "", 1, 1);
        
        // row 3 - drug count
        table_stats.setValueAt(drugWordCount + "", 2, 1);
        
        // row 3 - love count
        table_stats.setValueAt(loveWordCount + "", 3, 1);
        
    }

    // unused
    public void doEverything() {
        
        /* // delete here
            
            
            
            // String formatting for requesting URL (lyricswiki):
            // String of title and artist:
            // replace spaces with underscores
            // capitalize first letter
            // remove quotes from title
            
            // from title: replace spaces with underscore
            //             and delete surrounding quotes
            testTitle = testTitle.replace(" ", "_");
            testTitle = testTitle.replace("\"", "");
            testTitle = testTitle.replace(" ", "_");
            testTitle = testTitle.replace(",", "");
            
            // Specific song title cases -----------------------
            
            // 1954
            if(testTitle.equals("Oh!_My_Pa-Pa")) {
                testTitle = "Oh!_My_Pa-Pa_(O_Mein_Papa)";
            }
            
            // 2017
            if(testTitle.equals("Look_at_Me!")) {
                testTitle = "Look_at_Me";
            }
            
            if(testTitle.equals("iSpy")) {
                testTitle = "ISpy";
            }
            
            
            if(testTitle.equals("(Till)_I_Kissed_You")) {
                testTitle = "Till_I_Kissed_You";
            }
            
            if(testTitle.equals("Return_to_Me")) {
                testTitle = "Return_To_Me_(Ritorna-Me)";
            }
            
            // --------------------------------------------
            
            
            // from artist: replace spaces with underscore
            //              and get rid of feature in artist name
            //              as well as capitalize
            //              and switch "and" to "&" (%26)
            testArtist = testArtist.substring(0, 1).toUpperCase() + testArtist.substring(1);
            testArtist = testArtist.replace(" ", "_");
            
            if(testArtist.contains("featuring")) {
                testArtist = testArtist.substring(0, testArtist.indexOf("featuring") - 1 );
            }
            if(testArtist.contains("_and_")) {
                testArtist = testArtist.replace("and", "%26");
            }
            
            // Specific song artist cases -----------------------
            
            // Unknown year
            if(testArtist.equals("Carl_Dobkins_Jr.")) {
                testArtist = "Carl_Dobkins,_Jr.";
            }
            
            // --------------------------------------------------
            
            
            // url fetch, assigning song's lyrics to String "lyrics"
            // from lyrics wikia
            
            //String url = "http://lyrics.wikia.com/wiki/" + testArtist + ":" + testTitle;
            //System.out.println("URL: " + url + "\n");
            
            */ //if all goes wrong delete here
            
        // variables
        ArrayList <Song> songs = new ArrayList();
        int year = 2014; // year to scrape
        
        String url = "https://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_" + year;
        
        // song variable declaration
        String rank = "";
        String songName = "";
        String artistName = "";
        
        System.out.println(year);

        
            
        try{
            
            // connector
            // Document variable to connect to specified url
            // userAgent put in for less sketch
            // maxBodySize(0) allows for unlimited body size of elements
            
            Document d = Jsoup.connect(url).userAgent("Mozilla/17.0").maxBodySize(0).get();
            

            // Loops through elements within created Elements class (temp)
            // this is the functional part, html data to text
            Element table = d.select("table").get(0); //select the first table.
            Elements rows = table.select("tr");
    
            Iterator<Element> rowIterator = rows.iterator();
            rowIterator.next();

            while (rowIterator.hasNext()) {
                
                Element row = rowIterator.next();
                
                Elements cols = row.select("td");
                
                // This portion is done within each row
                // years 1951-1981 have rank in table as "th"
                // years 1982-2017 have rank in table as "td"
                // so condtional applied
                
                if(year > 1981) {
                    Elements rankHead = row.select("th");
                    rank = rankHead.get(0).text();
                    songName = cols.get(0).text();
                    artistName = cols.get(1).text();
                }
                else {
                    rank = cols.get(0).text();
                    songName = cols.get(1).text();
                    artistName = cols.get(2).text();
                }
                
                // creates song object (w/ rank, title, and artist)
                // and adds it to song object list
                //Song songboi = new Song(rank, songName, artistName);
                //songs.add(songboi);
                //System.out.println(songboi.toString());
                
            }
            
      
           } catch(IOException e) {
            e.printStackTrace();
            }

        
        // now lyrics:
        
        try{
            // generate random index of song list
            
            int random = (int )(Math.random() * 50 + 1);
            
            // get the title and arist names from song
            
            Song randomSong = songs.get(random);
            String testTitle = randomSong.getTitle();
            String testArtist = randomSong.getArtist();
            
            // Print for display
            System.out.println("Random:" + "\n");
            System.out.println("Song Title: " + testTitle);
            System.out.println("Song Artist: " + testArtist);
            
            // String formatting for requesting URL (lyricswiki):
            // String of title and artist:
            // replace spaces with underscores
            // capitalize first letter
            // remove quotes from title
            
            // from title: replace spaces with underscore
            //             and delete surrounding quotes
            testTitle = testTitle.replace(" ", "_");
            testTitle = testTitle.replace("\"", "");
            
            // from artist: replace spaces with underscore
            //              and get rid of feature in artist name
            //              as well as capitalize
            //              and switch "and" to "&" (%26)
            testArtist = testArtist.substring(0, 1).toUpperCase() + testArtist.substring(1);
            testArtist = testArtist.replace(" ", "_");
            
            if(testArtist.contains("featuring")) {
                testArtist = testArtist.substring(0, testArtist.indexOf("featuring") - 1 );
            }
            if(testArtist.contains("and")) {
                testArtist = testArtist.replace("and", "%26");
            }
            
           
            
            // url fetch, assigning song's lyrics to String "lyrics"
            // from lyrics wikia (All rights reserved)
            
            url = "http://lyrics.wikia.com/wiki/" + testArtist + ":" + testTitle;
            System.out.println("\n" + "URL: " + url);
        
            Document d = Jsoup.connect(url).userAgent("Mozilla/17.0").maxBodySize(0).get();
            
            String lyrics = d.select(".lyricbox").get(0).text();
            System.out.println("\n" + lyrics);
            
            // Analyzing lyrics, chops String up by word
            Scanner chopper = new Scanner(lyrics);
            int swearCount = 0;
            
            while(chopper.hasNext()) {
                String word = chopper.next();
                // Counting swears in lyrics

                
                if(word.contains("fuck") || word.contains("Fuck")) {
                    swearCount++;
                    System.out.println("Word found: fuck");
                }
                if(word.contains("shit") || word.contains("Shit")) {
                    swearCount++;
                    System.out.println("Word found: shit");
                }
                if(word.contains("ass") || word.contains("Ass")) {
                    swearCount++;
                    System.out.println("Word found: ass");
                }
                if(word.contains("nigga") || word.contains("Nigga")) {
                    swearCount++;
                    System.out.println("Word found: n*gga");
                }
                if(word.contains("pussy") || word.contains("Pussy")) {
                    swearCount++;
                    System.out.println("Word found: pussy");
                }
                if(word.contains("bitch") || word.contains("Bitch")) {
                    swearCount++;
                    System.out.println("Word found: bitch");
                }
                if(word.contains("dick") || word.contains("Dick")) {
                    swearCount++;
                    System.out.println("Word found: dick");
                }
                if(word.contains("damn") || word.contains("Damn")) {
                    swearCount++;
                    System.out.println("Word found: damn");
                }
            
            }
            
            
            System.out.println("\n" + "Swear Count: " + swearCount);
            //Element 
        
            
           
           } catch(IOException e) {
            e.printStackTrace();
            }
        
        
    }
    
    
        
       
    
    
    


} // end of class
